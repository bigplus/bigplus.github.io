# dp
ref
理解
https://www.zhihu.com/question/23995189
https://www.zhihu.com/question/39948290
https://github.com/tianyicui/DP-Book
http://cuitianyi.com/blog/tag/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%9A%84%E6%80%9D%E8%80%83%E8%89%BA%E6%9C%AF/
http://mat.gsia.cmu.edu/classes/dynamic/dynamic.html
https://www.zhihu.com/search?type=content&q=%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%90%86%E8%A7%A3

https://www.cnblogs.com/mhpp/p/7700235.html
http://www.cnblogs.com/yanlingyin/archive/2011/11/12/2246624.html
https://blog.csdn.net/qq_30137611/article/details/77655707

问题
https://zhuanlan.zhihu.com/p/33574315
https://zhuanlan.zhihu.com/p/35751179

--------------------------------------------------------------------------------
* dp = 状态转移方程 + 边界条件 + 最有子结构(一个阶段的最优可以由之前某一个阶段的最优得到, 而不需要担心之前的状态是怎么得到的，即无后效性)
* 递归， 备忘录， 动态规划求解

dp
判断条件：最优子结构，无后效性
确定dp后：划分阶段和定义状态。阶段是大的；每个阶段有多个状态，状态是小的；写出状态转移方程,确定边界条件
阶段/规模的解就是状态。

ps：另类解法：从空间的角度考虑。状态空间（解的状态空间, https://www.zhihu.com/question/23995189 coldwings)
https://www.zhihu.com/question/39948290
空间问题还需要好好理解.

解法：
1. 首先要定义这个问题和这个问题的子问题。(阶段，状态), 最优子结构，无后效性。
将原来的问题转化为：
    a. 条件
    b. 问题的方式(阶段和状态，状态就是阶段的解), 阶段：个数，第i项。。。；状态：最大值，长度。。。
       ps : 也就是确定了(阶段，状态), 状态转移方程

--------------------------------------------------------------------------------
V(i,j,k) = max{ V(ii, jj, kk) + Current(i,j,k) }
a. 状态转移方程
b. 状态
c. 最优子结构(全局最优解包含局部最优解)
d. 无后效性
e. 边界条件

状态转移，就是向目标靠近, 如何划分呢，用变量来表示目标, 变量往往是要求的，目标是已知条件里的终态。
尽可能的把状态丰富起来，用多个变量做下标进行定位.判断状态件是否最优子结构.这样就确定了状态和状态转移方程.当前选择=无后效性.

确定状态（无后效性，最优子结构），状态=（目标值，所求值，约束条件）
状态转移方程

目标值V已知 n[V]
目标值V未知


初始状态  -------->       选择    ----------->    终态
                 (关于当前的选择:0，1）          （涉及目标值，约束值）
		 (无后效性，但会和目标值
		 和约束值有相互影响）
		                                 F(目标值，约束值）== 待求值（即，待求值用函数值表示)

总的最高抽象
F(s) = op(F(s-1), 无后效性选择）
ps: s：状态; op：max，min，+，-，等等. 

（路径/阶段/规模） 是什么？ ==> 转移
（目标，约束，待求）是什么？ ==> 状态
路径与目标（目标即约束，比如目标的递减就是约束） 1：1 ==> F(N)
路径与目标与约束（即，有目标，有约束，且目标与约束不相等） 1：N ==> F（N， M）
ps : 路径，比如硬币问题，0元->11元

问题转化：
目标
约束
待求
无后效性
路径:分2种情况，前后依赖，与前后无依赖
状态转移方程

阶段是为了理清状态

DAG： 最长路，最短路，路径计数。
eg
0. 嵌套矩形(递增子序列)
A:1-N
目标：遍历all
约束：嵌套
待求：最多个数
无后效性：是否包含当前A(i)
F(N):以N结尾的矩形最大嵌套数
F(N) = max { F(M)} + 1

1. 硬币
路径：0元 -> 11元，
状态：N表示，即为终态目标与约束， 
无后效性选择为（1，3，5），
对目标值的影响：F(N-1), F(N-3), F(N-5)
F(N) = min{ F(N-1) + 1, F(N-3) + 1, F(N-5) + 1}

2. 台阶
10台阶，即终极目标与约束，无后效性选择（1，2），对目标值的影响：F（N-1）， F(N-2)
F(N) = F(N-1) + F(N-2)
