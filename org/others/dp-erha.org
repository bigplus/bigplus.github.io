* 项目说明
  长期以来，易宝支付平台受到如电商、游戏等行业存在的虚假商户、二清、黄赌毒等违规行为的困扰。2016年更为相关违规问题偿付了高达5000余万巨额罚单。
  对于此类行业频发的虚假交易等违规行为，当前并没有成熟的应对机制和解决方案。

  在商户管理部作为需求方，产品中心风控组作为需求接收方, 与数据平台数据分析能力相结合，实现一个商户交易风控系统，
  旨在解决如何问题：
1. 二清
2. 虚假
3. 违法违规
4. 混业经营
让业务需求和数据分析机器学习等技术紧密结合，真正做到“技术成就价值”，聚焦于解决已有问题、发现潜在问题、规避商户风险。为易宝创造价值，并驱动行业长期稳进发展！

* 产品说明与数据平台定位
  整套产品
  横向分2大部分：分析报告、数据分析与规则模型管理。即输出使用与管理2个功能。
  纵向由2部分构成：规则系统与机器学习模型。即将决策能力全部交给人来处理和将部分能力责权让渡给数据，让数据本身说话。
  同时产品定位，在满足业务人员基本需求的前提下，引导业务人员使用新技术，新理念。

  数据平台在产品中的定位为：
  基本技术能力与数据科学能力的输出。
  负责针对海量商户（包括中小微商户）按照不同行业类型做分析报告,建立二清，虚假，违规，混业场景数据模型.
  注意：有可能实现提规则执行引擎.

* 技术实现与如何建摸
** 以scikit-learn与tensorflow为基本机器学习工具

** 如何建模
   了解业务，熟悉数据(数据维度，数据属性，数据生命周期，业务含义)
   数据清洗
   特征提取
   训练模型
   交叉验证
   模型选择
   模型上线
   模型更新

** 模型与业务对应关系(待完善)

*** 基于特定行业分类，异常交易检测
    即找到有问题的商户
    采用经典的聚类分析思路做异常检测算法
    IsolationForest   孤立森林
    EllipticEnvelope 基于高斯概率密度异常检测
    OneClassSVM 一类支持向量机
*** 依据商户交易推断行业
*** 依据行业交易确定行业交易特点与边界

    TODO: 如何定义二清，什么特点


    #+AUTHOR: Jerry
    #+TITLE: report

* 项目说明
  NewReport定位为：提供了给运营，产品，数据分析人员自主的，灵活的，多维度数据查询的服务。作为数据仓库顶层的一个应用，具有敏感数据行列级别权限控制，同比环比，以及自定义时间范围对比，用户偏好设置，自动邮件推送订阅，广播式权限授权，数据撰取，查询逻辑自定义等特点。
* 设计说明
** 总体架构设计
   NewReport作为数据仓库之上的主要数据分析工具，对用户提供了直接操作说明。采用前后端分离web架构方式。
   #+CAPTION: 功能模块总览
   [[./img/report.png]]
+ 前端：采用纯html+css+js的方式，同时采用handerbars做前端模块抽象,是JavaScript一个语义模板库，通过对view和data的分离来快速构建Web模板.
  + 查询下载模块，邮件模块，定时模块，数据撰取，偏好设置，同比环比，广播式权限设置
+ 后端：采用Java研发report-core核心模块，report-core的核心抽象为底层数据定位，多维度查询，流式下载提供支持。
  + report-core核心逻辑抽象：定义资源描述，解析sql，执行查询下载
  + 行列级别权限控制
** 模块设计
*** 核心逻辑抽象
    查询逻辑:
    #+CAPTION:查询逻辑展示
    [[./img/report-query-logic.png]]
*** 报表配置功能
    每个报表在数据库记录基本信息,并使用一个xml文件进行详细的配置
    配置内容主要包括

***** 报表基本信息(报表中文名称,报表别名,报表的父级菜单,是否支持下载和对比功能等)
***** 进行sql查询时的表关联方式
***** 可查询的列(每一列包括执行sql使用的名称,中文名称和英文别名等)
***** 可进行的过滤条件(每个过滤条件会在sql中增加一个where条件,过滤信息包括过滤的列,过滤的方式in,like,range等,以及页面提供的输入组件textarea,input等)
      配置文件保存在/etc/daportal/中(迁移至数据库)
      配置文件样例:
      #+BEGIN_SRC XML
<report>
  <tables factTable="CUSTOMERINFO" as="CU">
    <lookup lookupTable="CUSTOMERRELATIONSHIP" as="REL" joinType="left">
  </tables>
  <allcolumns comp="0">
    <columns name="维度1">
      <column text="信用账户授信额度" sqlField="CU.CREDITLIMIT" type="sum" decimals="2" comp="dimen"/>
      <column text="代理商类型" sqlField="CU.AGENTTYPE" type="group" comp="dimen"/>
    </columns>
    <columns name="维度2">
      <column text="网址" sqlField="CU.WEBURL" type="group" comp="dimen"/>
      <column text="省" sqlField="CU.PROVINCE" type="group" comp="dimen"/>
    </columns>
  </allcolumns>
  <querys hideButton="4" download="1">
    <query text="代理商编号" queryType="in" labelType="textarea" must="0">
      <data key="limit" value="0"/>
    </query>
    <query text="商户编号" queryType="in" labelType="textarea" must="1">
      <data key="limit" value="100"/>
    </query>
  </querys>
</report>
      #+END_SRC
*** 权限管理
**** 报表系统权限主要分为用户-角色-功能
***** 功能
+ 每个功能对应一个报表配置
+ 在前端,每个查询页面即为一个功能
+ 在系统后台,每个功能对应一个xml配置文件
***** 角色
+ 每个角色可以分配多个功能的权限
+ 角色不但可以指定功能的权限,同时可以指定功能的列的权限和行的权限
***** 用户
+ 每个用户可以分配多个角色的权限
+ 用户也可以定义行权限,用户的行权限将覆盖角色中定义的行权限
+ 每个用户有自己的登录账号和密码
**** 报表系统中用户类型分为普通用户,管理员和超级管理员
***** 普通用户
      只能查询数据
***** 管理员
+ 可以查询数据
+ 可以创建角色,但是角色的权限范围在自己的查询权限以内
+ 只能创建普通用户,给用户分配角色只能使用自己创建的角色
***** 超级管理员
+ 可以查询数据
+ 可以创建角色,角色权限任意给
+ 可以创建任意类型的用户(包括超级管理员),并使用和编辑任何人创建的角色
*** 邮件推送
    邮件推送主要包含了定时组件和邮件发送组件,这两个组件将迁移到基础设施中
+ 定时使用quartz定时器,将配置的定时内容转化为cron表达式进行定时任务
+ 定时触发时,读取报表查询的配置,调用查询功能下载文件到本地tmp目录下,然后调用邮件功能将文件发送到指定邮箱
*** 偏好配置
    为了方便数据分析人员的查询,可以将查询的条件进行保存,以后查询的时候可以便捷的加载查询条件
+ 每个偏好保存一个用户在一个功能页面进行的所有条件选择(包括选择的列和过滤条件)
+ 偏好配置保存在数据库中,加载的时候从数据库读取
+ 每次点击查询时会保存偏好配置到cookie中,打开页面初始化时使用cookie中的偏好配置
*** 对比
    将时间控件分割为多个时间控件,每次查询的时候都同时进行多次查询,然后将查询的数据结果中维度相同的数据进行组合,即可进行数据对比
***** 配置对比功能
      使用对比功能需要再功能配置中打开对比功能,并配置每个列在对比中的类型,一共有一下4个类型

+ time,时间字段,有且只有一个,这个字段的时间选择控件将可以使用多个时间控件,从而选择多个时间段进行对比
+ demon,维度字段,对比的两次查询,维度相同的会合并成一行数据,如基础产品,商户名称等
+ num,数字或者度量字段,这个字段的值会进行对比,并计算差值以及差值的百分比,比如收入,交易笔数等
+ none,其他特殊字段,不是进行对比的度量,也不能像维度一样相同的合并成一行数据,比如在日统计中的月份,月份即使不同,但是任然是相同的维度,需要将数据进行合并成一行进行对比
***** 对比查询
      在查询时,因为是流式输出,需要多个查询并行执行,按维度组合进行排序,所有查询中维度和最小的输出合并,并查询吓一跳,其他查询保持当前行
*** 数据库设计
    五.数据库设计

    1.权限部分

    1.1 auth_function(功能表)

    每行数据记录一个功能,功能的详细内容记录在xml文件中

+ id:主键(自增长)
+ reportid:报表id,对应xml文件的文件名
+ reportname:报表的中文名
+ view:报表如何显示(用来兼容以前的版本,在v3.x版中,这个字段固定为report)
+ pid:父菜单id,如果自己是父菜单,那么pid=null
1.2 auth_role(角色表)

每行数据记录一个角色信息

+ id:主键(自增长)
+ coment:角色的中文名称
+ createUid:创建这个角色的用户id
1.3 auth_user(用户表)

每行记录一个用户信息

+ id:主键(自增长)
+ username:用户名(用于登陆)
+ password:密码(密文存储)
+ fullname:用户的中文名字
+ parameter:在旧版本中以json格式存储用户的其他参数,现在固定用"{}"
1.4 auth_r2f(关联角色可用的功能权限)

关联角色可以操作的功能的权限

+ id:主键(自增长)
+ fid:功能id
+ rid:用户id
+ type:在旧版本中使用,现在固定为"function"
1.5 auth_r2column(关联角色可用的列权限)

关联角色可以查询的列的权限

+ id:主键(自增长)
+ rid:用户id
+ fid:功能id
+ name:列名
1.6 auth_filter(关联用户的行权限,已没有使用)

1.7 auth_parr(关联可用的行权限)

+ id:主键(自增长)
+ pid:关联的表的id
+ type:关联的表类型,可使用function,role,user
+ dataType:数据类型,可使用in,range
+ value:权限的值,in:逗号分割的多个值,range:逗号分割的两个值,表示范围
1.8 auth_u2r(关联用户可用的角色权限)

+ id:主键(自增长)
+ rid:角色id
+ uid:用户id
2.偏好配置

2.1 preferrence

每行记录一个偏好

+ id:主键(自增长)
+ userid:用户id
+ fid:功能id
+ name:偏好的名称
+ value:保存选择的列
+ filters:保存选择的过滤条件
3.邮件推送

3.1 pushmail

每行记录一个需要推送邮件的任务

+ id:主键(自增长)
+ userid:用户id
+ formData:所有查询参数,在推送邮件时,使用formData中的参数作为查询条件进行查询
+ sendTime:发送邮件的时间
+ mailUrl:发送邮件的邮箱地址,多个用";"分割
+ mailName:邮件的主题
+ queryDataName:需要动态替换的时间字段(比如需要每次发送昨天的查询等情况)
+ queryDataType:时间字段具体替换的规则(昨天,前天,上个月等,可灵活配置)
4.日志信息(保留所有的原始访问请求参数,保留生成的查询sql,每次查询时的系统内存等信息)

4.1 log

+ id:主键(自增长)
+ userid:用户id
+ type:日志的中文说明分类(比如sql,内存等)
+ msg:日志的详细信息(具体的sql语句,具体的内存情况等)
+ error:如果有报错,保存Exception的堆栈信息
+ time:日志输出时间
+ level:日志级别(INFO,ERROR等)

* 使用说明
** 数据分析人员
*** 概要
    下图从宏观上展示了整个报表引擎的使用
    #+CAPTION:报表功能区总览
    [[./img/report-all.png]]
*** 查询
    登陆用户后即可进入报表进行查询
**** 角色切换
     同一个用户可以使用多个角色,每个角色会有不同的查询权限
     #+CAPTION:报表角色切换
     [[./img/report-role.png]]
**** 对比(同比环比)
     如果时间选择上又使用对比,那么这个功能可以进行对比查询
     可以自定义进行对比的个数,以及每个对比的时间范围

     #+CAPTION:报表对比1（同比环比）
     [[./img/report-cmp1.png]]
     #+CAPTION:报表对比2（同比环比）
     [[./img/report-cmp2.png]]
**** 列的显示顺序和排序
     点击拖拽已选择的列,可以交换列的顺序
     查询结果前面的列会进行排序

     #+CAPTION:报表列的显示与排序
     [[./img/report-sort.png]]
**** 数据下载
     支持将查询结果下载到文件,支持csv和excel的格式
     #+CAPTION:报表数据下载
     [[./img/report-download.png]]

**** 数据钻取
     在已经查询的结果中,可以快速的增加查询条件,从而钻取数据

     #+CAPTION:报表数据钻取
     [[./img/report-drilldown.png]]
*** 偏好设置
    可以将当前选择的字段和过滤条件进行保存,方便下次使用

    #+CAPTION:报表数据偏好设置
    [[./img/report-preference.png]]
*** 邮件推送
    可以将当前的查询添加到邮件推送,在指定时间进行查询,并将结果保存为文件,发送到指定邮箱

    #+CAPTION:报表数据推送
    [[./img/report-push.png]]
** 管理员
*** 角色管理
    可以对角色进行增删改,并编辑角色的权限(角色的权限仅限于当前管理员的权限范围以内)

    #+CAPTION:报表角色管理
    [[./img/report-admin.png]]
*** 用户管理
    可以对用户进行增删改,不同管理员之间的用户互相隔离
    用户也可以编辑行权限,用户的行权限会覆盖角色的行权限

    #+CAPTION:报表用户管理
    [[./img/report-user.png]]
** 超级管理员
*** 角色和用户管理
    超级管理员可以管理所有的角色和用户,并使用所有报表的权限

    #+CAPTION:报表用户添加
    [[./img/report-add.png]]
*** 功能管理
    超级管理员可以对功能进行编辑
**** 功能基本信息
     功能基本信息包括功能名,以及是否支持下载和对比等

     #+CAPTION:报表用户行功能添加
     [[./img/report-line.png]]
     #+CAPTION:报表用户管理
     [[./img/report-root.png]]
**** 表关联设置
     生成查询sql时使用的表关联方式

     #+CAPTION:报表表关联
     [[./img/report-tbl-join.png]]
**** 查询字段设置
     在查询手会查询的列,以及他们在界面显示的中文名称
     类型
     sum:度量类型,查询时会对字段进行sum操作
     group:维度类型,查询时会对字段group by操作
     none:其他类型,查询时候不做额外的操作
     对比类型,需要在基本信息中开启对比功能
     time:时间字段,有且仅有一个
     demon:维度字段
     num:度量字段

     #+CAPTION:报表查询列
     [[./img/report-column-join.png]]
**** 查询条件设置
     中文名称
     查询类型:
     in:枚举查询
     like:模糊匹配
     时间(天和月)
     范围:数字范围
     页面类型
     in可以使用复选框和输入框
     like只能使用输入框
     时间天和月有专门的时间控件
     无:页面不显示,在配置权限的时候使用
     参数
     可以显示查询个数,时间范围等
     在复选框时,需要选择使用的字典表

     #+CAPTION:报表查询条件设置
     [[./img/report-condition.png]]
**** 字典表
     超级管理员可以编辑字典表,在编辑复选框时使用

     #+CAPTION:报表字典信息1
     [[./img/report-dict1.png]]
     #+CAPTION:报表字典信息2
     [[./img/report-dict2.png]]
* 源码
* 部署环境
  #+BEGIN_SRC

1、软件环境： Java 1.7
2、编程语言：Java
主要功能有：
内部产品与运营
多维度聚合数据灵活查询
敏感数据支持行列级权限
同比环比、自定义时间对比
用户偏好设置
自动邮件发送
广播式权限授权

  #+END_SRC

  #+TITLE: ETL 设计文档


* 项目说明
  #+BEGIN_SRC
  ETL，Extraction-Transformation-Loading的缩写，即数据抽取（Extract）、转换（Transform）、装载（Load）的过程，它是构建数据仓库的重要环节。
  ETL是将业务系统的数据经过抽取、清洗转换之后加载到数据仓库的过程，目的是将企业中的分散、零乱、标准不统一的数据整合到一起，为企业的决策提供分析依据。ETL是BI项目重要的一个环节。通常情况下，在BI项目中ETL会花掉整个项目的1/3的时间,ETL设计的好坏直接关接到BI项目的成败。 　　

  在数据仓库的构建中，ETL贯穿于项目始终，它是整个数据仓库的生命线，包括了数据清洗、整合、转换、加载等各个过程。如果说数据仓库是一座大厦，那么ETL就是大厦的根基。ETL抽取整合数据的好坏直接影响到最终的结果展现。所以ETL在整个数据仓库项目中起着十分关键的作用，必须摆到十分重要的位置。 　　
  通过ETL，我们可以基于源系统中的数据来生成数据仓库。ETL为我们搭建了OLTP系统和OLAP系统之间的桥梁，是数据从源系统流入数据仓库的通道。在数据仓库的项目实施中，它关系到整个项目的数据质量，所以马虎不得，必须将其摆到重要位置，将数据仓库这一大厦的根基筑牢! 　
  #+END_SRC
* 设计说明
** 总体架构说明
   #+BEGIN_SRC

  ETL主要是利用转换服务器的处理能力，从源表抽取数据后，在转换服务器中进行数据清洗、转换，完成后加载到目标库中。它的转换过程都是在转换服务器中进行的，所以它的性能瓶颈在中间的转换服务器中。 　　
  ETL的设计分三部分：数据抽取、数据的清洗转换、数据的加载。在设计ETL的时候我们也是从这三部分出发。数据的抽取是从各个不同的数据源抽取到ODS（OperationalDataStore，操作型数据存储） 中——这个过程也可以做一些数据的清洗和转换），在抽取的过程中需要挑选不同的抽取方法，尽可能的提高ETL的运行效率。ETL三个部分中，花费时间最长的是“T”（Transform，清洗、转换）的部分，一般情况下这部分工作量是整个ETL的2/3。数据的加载一般在数据清洗完了之后直接写入DW （DataWarehousing，数据仓库）中去。 　　
  ETL的实现有多种方法，常用的有三种。一种是借助ETL工具实现，一种是SQL方式实现，另外一种是ETL工具和SQL相结合。前两种方法各有各的优缺点，借助工具可以快速的建立起ETL工程，屏蔽了复杂的编码任务，提高了速度，降低了难度，但是缺少灵活性。SQL的方法优点是灵活，提高ETL运行效率，但是编码复杂，对技术要求比较高。我们的ETL是综合了前面二种的优点，将业务逻辑放在了数据转换阶段，这样既可以极大的适应公司的各种需求，又可以提高ETL的开发速度和效率。
   #+END_SRC
   以下是我们的 ETL的结构流程：
   #+CAPTION: ETL流程图
   [[./img/etl-all]]

** 数据的抽取 　　
   这一部分需要在调研阶段做大量的工作，首先要搞清楚数据是从几个业务系统中来,各个业务系统的数据库服务器运行什么DBMS,是否存在手工数据，手工数据量有多大，是否存在非结构化的数据等等，当收集完这些信息之后才可以进行数据抽取的设计。 　　
   首先，要把不同的来源数据抽取过来，经过最基本的清洗，存放起来。格式类似于：select *, count(*), sum(*) from multi table
   第二个问题就是要注意抽取数据的时间类型，全量还是增量，增量需选取一个时间列。

** 数据的清洗转换 　　
   #+BEGIN_SRC

通常的做法是从业务系统到数据源做清洗，将脏数据和不完整数据过滤掉，再进行一些业务规则的计算和聚合。 　　
1、数据清洗 　　
数据清洗的任务是过滤那些不符合要求的数据，将过滤的结果交给业务主管部门，确认是否过滤掉还是由业务单位修正之后再进行抽取。不符合要求的数据主要是有不完整的数据、错误的数据、重复的数据三大类。 　　
格式清洗：空值处理，规范化数据格式，无效数据替换，（过滤和排序）
清洗时首先是要将数据存放在内存中，数据结构为Table<String,String,Object>（队列中）或文件。
2、数据转换 　　
数据转换的任务主要进行不一致的数据转换、数据粒度的转换，以及一些商务规则的计算。 　　
（1）不一致数据转换：这个过程是一个整合的过程，将不同业务系统的相同类型的数据统一，比如同一个供应商在结算系统的编码是XX0001,而在CRM中编码是YY0001，这样在抽取过来之后统一转换成一个编码。 　　
（2）数据粒度的转换：业务系统一般存储非常明细的数据，而数据仓库中数据是用来分析的，不需要非常明细的数据。一般情况下，会将业务系统数据按照数据仓库粒度进行聚合。 　　
（3）商务规则的计算：不同的企业有不同的业务规则、不同的数据指标，这些指标有的时候不是简单的加加减减就能完成，这个时候需要在ETL中将这些数据指标计算好了之后存储在数据仓库中，以供分析使用。
我们的数据转换包含几个基本类型：横纵合并，替换=有条件的替换+无条件替换，关联，支持扩展。
   #+END_SRC

** 数据加载
   将统一格式数据导入数据仓库。并且我们支持多库同时加载。

   四、我们的ETL不同之处
   首先，我们的ETL具有定时功能模块，可以定时跑任务，这样能够保证作业的周期性执行。其次，我们的ETL最重要之处在于数据转换类型。我们定义了几种特殊的转换类型来使用我们公司的需求，这样能够保证ETL的有效执行，而如果选用市场上的ETL有可能出现不满足公司业务需求的问题。再次我们的ETL支持业务自由开发，只要编写，添加ETL的转换器就可以实现对于特定需求的满足。可以提供较强大的连接功能（connectivity）来连接来源及目的端，开发人员不用去熟悉各种相异的平台及数据的结构，亦能进行开发。
* 使用说明
** ETL模块（抽取extract, 转换transform, 存储Load）
   ETL登录以后可以看到做以下几个操作。（登录之后默认进入任务管理界面。）
   #+CAPTION: etl功能
   [[./img/etl-function.png]]
*** 任务管理
    ETL登录之后首先进入任务管理界面。
    任务管理界面可以用来配置ETL任务。

    ETL任务配置：
    点击页面右上角操作按钮，选择创建新任务，出现如图所示。

**** Job配置
     #+CAPTION: Job配置
     [[./img/etl-job.png]]
+ 任务标识：任务名称，给你的ETL任务起一个名字。
+ 任务描述：描述该任务所要做的事情
+ 是否可用：默认值为可用（配置任务时就默认可用就ok了）
+ 时间粒度、时间范围、时间类型：
+ 时间粒度是你从数据库捞取数据的单位，如果你只需要捞取一天那么久选“日”，如果你想全部捞取就选择“所有”。
+ 时间范围根据时间粒度划分，比如你选择按“日”捞取的话，时间范围就选择捞取的起止日期。
+ 时间类型，根据来定。

**** E配置
     点击添加可以看到E配置信息。（不知道怎么填写的尽量默认）
     E配置可以配置多个，（需要从几个表里拿数据就配置几个 e）每一个分为数据源配置和E配置两部分。下面我们来看一个：

**** Extracter配置
     #+CAPTION:Extracter配置
     [[./img/etl-e.png]]
     #+BEGIN_SRC
数据源配置：
数据源配置为捞取的数据库相关的配置。
任务标识：默认为Job配置的任务名称，不可更改。
数据源标识：自己给这个E配置起的名称。
sql语句：通过sql语句来向数据库中的某些表select数据。
是否可用：默认可用。
数据库：该 e任务从哪个数据库中捞取数据。（如果选项中没有你所需的数据库则从菜单栏的增加数据源来增加数据库，操作请看下面）
是否全部捞取：根据自己所需情况选择。
是否加密：根据自己表中的字段是否加密来判断。
期望捞取行数：不用填。
E配置：
字段名称类型：你的sql当中所用到的字段应该由对应的类型，将对用的类型用jason格式表示出来，顺序不区分。
抽取类型：默认RdbExtractor。
是否可用：默认可用
是否需要清洗：默认清洗。
     #+END_SRC
**** Transformation配置
     T配置是和E配置一一对应的，也就是你有几个 E配置就要有几个T配置。

     #+CAPTION:Transformation配置
     [[./img/etl-t.png]]
     #+BEGIN_SRC
转换标识：与对应的E配置的数据源标识一致
任务标识：默认与Job一致
是否可用：默认可用
转换类型：（接下来会介绍）
数据源标识：与E配置的数据源标识一致


接下来：（转换类型）
转换类型选项：
主表
默认合并转换器
列替换转换器
主键替换转换器
其他（特殊任务需要，不需要了解）

主表：第一个T配置，转化类型要配置成主表，即为合成宽表的基础表。
默认合并转换器：
将两个表合并
规则：后面的数据集中的数据覆盖前面的数据集中有相同rowkey的值
列替换转换器：
表1: 字段1 =>表2: 字段2
规则：把表1的字段2替换成表2的字段2，条件是字段1等于表2的主键
主键替换转换器：
表1: 字段1 =>表2: 字段2
规则：把表1的字段1替换成表2的字段2，条件是字段1等于表2的主键

     #+END_SRC

**** Loader配置

     #+CAPTION:Loader配置
     [[./img/etl-l.png]]
     #+BEGIN_SRC
加载标识：自己起一个名字
加载驱动类: 默认RdbBatchLoader
数据库：需要load到的数据库名称
表名称：
是否包含加密：依自身任务决定
isEtlTaskIdNeeded：默认是
updatesqlList：如需更新宽表数据，及在此处填写相应的sql

     #+END_SRC
     #+BEGIN_SRC
加载标识：自己起一个名字
加载驱动类: 默认RdbBatchLoader
数据库：需要load到的数据库名称
表名称：
是否包含加密：依自身任务决定
isEtlTaskIdNeeded：默认是
updatesqlList：如需更新宽表数据，及在此处填写相应的sql

     #+END_SRC
**** 增加数据源
     如果ETL任务中没有所需数据库，则在此添加
     [[./img/etl-as.png]]
**** 定时任务
     [[./img/etl-timer.png]]
     #+BEGIN_SRC
定时任务：设置任务跑的时间点
例： 0 30 2 * * ?
代表每天的2:30:00开始执行任务
例：18 30 12 * * ?
代表每天的12:30:18开始执行任务
（注：定时任务设定时间尽量避开其他定时任务，以防高峰期）

显示定时任务：可以查看定时设置状态，同时可以对定时任务进行修改

     #+END_SRC
