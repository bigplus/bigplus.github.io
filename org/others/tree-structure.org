#+TITLE: 关于树的数据结构
#+AUTHOR: Jerry
* 关于树的数据结构介绍
** 平衡二叉树（AVL树）
#+BEGIN_SRC demo

平衡二叉树（Balanced Binary Tree）又被称为AVL树，区别于AVL算法.
且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。
构造与调整方法平衡二叉树的常用 /* 算法 */ 有红黑树、AVL、Treap、伸展树, SBT等。
#+END_SRC

红黑树
　　红黑树是一种自平衡二叉查找树，是在计算机科学中用到的一种数据结构，典型的用途是实现关联数组。它是在1972年由Rudolf Bayer发明的，他称之为"对称二叉B树"，它现代的名字是在 Leo J. Guibas 和 Robert Sedgewick 于1978年写的一篇论文中获得的。它是复杂的，但它的操作有着良好的最坏情况运行时间，并且在实践中是高效的: 它可以在O(log n)时间内做查找，插入和删除，这里的n是树中元素的数目。
AVL
　　AVL是最先发明的自平衡二叉查找树算法。在AVL中任何节点的两个儿子子树的高度最大差别为一，所以它也被称为高度平衡树。查找、插入和删除在平均和最坏情况下都是O（log n）。增加和删除可能需要通过一次或多次树旋转来重新平衡这个树。
Treap
　　Treap是一棵二叉排序树，它的左子树和右子树分别是一个Treap，和一般的二叉排序树不同的是，Treap纪录一个额外的数据，就是优先级。Treap在以关键码构成二叉排序树的同时，还满足堆的性质(在这里我们假设节点的优先级大于该节点的孩子的优先级)。但是这里要注意的是Treap和二叉堆有一点不同，就是二叉堆必须是完全二叉树，而Treap并不一定是。
伸展树
　　伸展树（Splay Tree）是一种二叉排序树，它能在O(log n)内完成插入、查找和删除操作。它由Daniel Sleator和Robert Tarjan创造。它的优势在于不需要记录用于平衡树的冗余信息。在伸展树上的一般操作都基于伸展操作。

1. 二叉树
#+BEGIN_SRC demo
一般的，红黑树同时满足以下五大特性：
1. 所有节点的颜色是红色或者黑色；
2. 根节点是黑色；
3. 所有的叶子节点是黑色（叶子节点包含NULL）；
4. 每个红色的节点都有两个黑色的子节点；
5. 从任意节点出发，到其所有叶子节点的简单路径上都包含相同数目的黑色节点.
#+END_SRC
