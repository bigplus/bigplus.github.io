#+BEGIN_SRC Java
package org.jerry.leetcode;

/**
 * PathSum
 *
 * https://leetcode.com/problems/path-sum/
 *
 *
 * Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.

 For example:
 Given the below binary tree and sum = 22,
 5
 / \
 4   8
 /   / \
 11  13  4
 /  \      \
 7    2      1
 return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.

 Subscribe to see which companies asked this question
 *
 *
 *
 * @author zhuyu_deng (zhuyu.deng@foxmail.com)
 * @date 1/3/17
 */

import java.util.Stack;

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode(int x) { val = x; }
 * }
 */
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int x) {
        val = x;
    }
}

/**
 *  binary tree root order
 */
public class PathSum {

    public boolean hasPathSumRecursive(TreeNode r, int s) {

        if ( r == null ) return false;
        return ( s-r.val == 0 && r.left == null && r.right == null ) || hasPathSumRecursive(r.left, s-r.val) || hasPathSumRecursive(r.right, s-r.val);
    }


    // non recursive
    //
    // https://discuss.leetcode.com/topic/35151/accepted-java-iteration-solution-with-one-stack-without-change-the-value-of-treenode
    //
    public boolean hasPathSumNonRecursive(TreeNode root, int sum) {
        Stack<TreeNode> stack = new Stack<>();
        while (!stack.isEmpty() || root != null) {
            while (root != null) {
                stack.push(root);
                sum -= root.val;
                root = root.left;
            }

            if (sum == 0 && stack.peek().right == null && stack.peek().left == null) {
                return true;
            }

            //root == null
            //pop all nodes whose children pathes have been both checked.
            while (!stack.isEmpty() && stack.peek().right == root) {
                root = stack.pop();
                sum += root.val;
            }
            root = stack.isEmpty() ? null : stack.peek().right;
            //root is now the first node in in-order which has never been pushed in the stack.
        }
        return false;
    }

}

#+END_SRC
