#+TITLE: RPC 总结

* 前言
从13年使用thrift，最近15年用dubbo做一些项目，使用rpc有段时间了，现在简单总结一下。

* RPC定义
RPC（Remote Procedure Call Protocol），远程过程调用协议。\\
一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。它是一项广泛用于支持分布式应用程序（不同组件分布在不同计算机上的应用程序）的技术。f
让你调用远程接口服务，如同调用本地接口一样简单方便。

特点：
1. 进程间通信（IPC，Inter-Process Communication）的一种技术，一般指不同机器上的进程间通信。

在采用C等古老语言编程的时候，RPC被称作了对S端的“子程序”的调用，所以称“过程调用”。在OOP出现后，RPC也可以称为远程方法调用（RemoteMethodInvocation），或者远程调用（RemoteInvocation）。


* RPC 起源 
RPC的概念与技术早在1981年由Nelson提出。1984年，Birrell和Nelson把其用于支持异构型分布式系统间的通讯…Birrel的RPC模型引入存根进程(stub)作为远程过程的本地代理，
调用RPC运行时库(RPCruntime)来传输网络中的调用。Stub和RPCruntime屏蔽了网络调用所涉及的许多细节，特别是，参数的编码／译码及网络通讯是由stub和RPCruntime完成的因此这一模式被各类RPC所采用由于分布式系统的异构性及分布式计算模式与计算任务的多样性，
RPC作为网络通讯与委托计算的实现机制，在方法、协议、语义实现上不断发展，种类繁多，其中SUN公司和开放软件基金会(OSF)在其分布式产品中所建立和使用的RPC较为典型。

* RPC的结构原理

** RPC分为5部分
1. Client
2. Client-stub
3. RPCRuntime
4. Server-stub
5. Server
   
** RPC 组件职责
上面我们进一步拆解了 RPC 实现结构的各个组件组成部分，下面我们详细说明下每个组件的职责划分。

#+BEGIN_SRC 

1. RPC服务端，即RPCServer  
   负责暴露服务。在代码中表示为导出（export）远程接口。
2. RPC客户端，即RPCClient  
   即调用远程接口端。负责refer或者说导入（import）远程接口的代理实现。
3. RPCProxy  
   远程接口的代理实现，主要为客户端调用代理远程实现。
4. RPCInvoker  
   客户方实现：负责编码调用信息和发送调用请求到服务方并等待调用结果返回  
   服务方实现：负责调用服务端接口的具体实现并返回调用结果  
5. RPCProtocol  
   负责协议编/解码  
6. RPCConnector  
   负责维持客户方和服务方的连接通道和发送数据到服务方，demo中由TCP实现。  
7. RPCAcceptor  
   负责接收客户方请求并返回请求结果  
8. RPCProcessor  
   负责在服务方控制调用过程，包括管理调用线程池、超时时间等  
9. RPCChannel，demo中为tcp连接， *应该为长连接*
   数据传输通道  
#+END_SRC


** RPC 组件调用关系
/PS：RPCFramework在实现过程中，可以分离出RCPClient和RPCServer端。\\
所以，有时候会理解为，服务端引用RPCServer端，暴露接口，客户端引用RPCClient，调用接口。其实都是一样的。/


#+BEGIN_SRC example

-----------------------------------------------------------------------------------------------------------------------
            Client                      --------call---------->                 Server
     --------------------------------------------------------------------------------------------------------------
     1. 通过RPC框架引入RemoteAPI                                                RemoteAPI实现 （通过RPC框架暴露RPC接口）
             |                                                                     ^
             |                                                                     |
             v                                                                     |
          RPCPROXY                                                             RPCInvoker
             |                                                                     ^
             |                                                                     |
             v                                                                     |
          RPCInvoker                                                           RPCProcessor
             |                                                                     |
             |                                                                     |
      RPCProtocal + RPCConnector     ->     RPCChannel             ->       Acceptor + RPCProtocol
-----------------------------------------------------------------------------------------------------------------------

#+END_SRC

#+BEGIN_SRC 
解释：
RPC服务端 通过 RPC框架(即RPCFramework) 端export导出RomoteAPI。
RPC-Client通过 RPC框架(即RPCFramework) 端import引入（也可以说refer）RomoteAPI
RPC 服务方通过 RpcServer 去导出（export）远程接口方法，而客户方通过 RpcClient 去引入（import）远程接口方法。
客户方像调用本地方法一样去调用远程接口方法，RPC 框架提供接口的代理实现，实际的调用将委托给代理RpcProxy 。代理封装调用信息并将调用转交给RpcInvoker 去实际执行。
在客户端的RpcInvoker 通过连接器RpcConnector 去维持与服务端的通道RpcChannel，并使用RpcProtocol 执行协议编码（encode）并将编码后的请求消息通过通道发送给服务方。
RPC 服务端接收器 RpcAcceptor 接收客户端的调用请求，同样使用RpcProtocol 执行协议解码（decode）。解码后的调用信息传递给RpcProcessor 去控制处理调用过程，最后再委托调用给RpcInvoker 去实际执行并返回调用结果。
#+END_SRC
*** RPC的调用过程（Stub这个术语应该是借鉴了JavaRMI）:
1. Client向ClientStub发送请求（Call）。
2. ClientStub对请求参数进行封包（也叫Marshalling），发出系统调用，OS向S端发送消息。
   具体的说：负责将调用的接口、方法和参数通过约定的协议规范进行编码并通过本地的 RPCRuntime 实例传输到远端 RPCRuntime 的实例。
3. S端接收到消息后，把封包消息传递给ServerStub。ServerStub解包（UnMarshalling）。远端 RPCRuntime 实例收到请求后交给 server-stub 进行解码后发起本地端调用，调用结果再返回给 user 端。
4. ServerStub调用S端的子程序。处理完毕后，以同样的方式向C端发送结果。
注：ServerStub又叫Skeleton。

*** 什么是Stub？
Stub是一段代码，用来转换RPC过程中传递的参数。处理内容包括不同OS之间的大小端问题。另外，Client端一般叫Stub，Server端一般叫Skeleton。
生产方式：1）手动生成，比较麻烦；2）自动生成，使用IDL（InterfaceDescriptionLanguate），定义C/S的接口。
交互机制标准：一般采用IDL，生成IDL的工具 RPCGEN（）。


** RPC调用分类
1. 同步调用
   客户方等待调用执行完成并返回结果。
2. 异步调用
   客户方调用后不用等待执行结果返回，但依然可以通过回调通知等方式获取返回结果。
   若客户方不关心调用返回结果，则变成单向异步调用，单向调用不用返回结果。

   
* RPC Java实现(简单版）

** 实现服务端 export() 暴露接口服务， 客户端引入refer()服务（内部实现代理调用）
#+BEGIN_SRC java
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.net.ServerSocket;
import java.net.Socket;

/**
 * RpcFramework
 */
public class RpcFramework {

    /**
     * 暴露服务
     *
     * @param service 服务实现
     * @param port    服务端口
     * @throws Exception
     */
    public static void export(final Object service, int port) throws Exception {
        if (service == null)
            throw new IllegalArgumentException("service instance == null");
        if (port <= 0 || port > 65535)
            throw new IllegalArgumentException("Invalid port " + port);
        System.out.println("Export service " + service.getClass().getName() + " on port " + port);
        ServerSocket server = new ServerSocket(port);

        for (; ; ) {
            try {
                final Socket socket = server.accept();

                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            try {
                                ObjectInputStream input = new ObjectInputStream(socket.getInputStream());
                                try {
                                    String methodName = input.readUTF();
                                    Class<?>[] parameterTypes = (Class<?>[]) input.readObject();
                                    Object[] arguments = (Object[]) input.readObject();
                                    ObjectOutputStream output = new ObjectOutputStream(socket.getOutputStream());
                                    try {
                                        Method method = service.getClass().getMethod(methodName, parameterTypes);
                                        Object result = method.invoke(service, arguments);
                                        output.writeObject(result);
                                    } catch (Throwable t) {
                                        output.writeObject(t);
                                    } finally {
                                        output.close();
                                    }
                                } finally {
                                    input.close();
                                }
                            } finally {
                                socket.close();
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }).start();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * 引用服务
     *
     * @param <T>            接口泛型
     * @param interfaceClass 接口类型
     * @param host           服务器主机名
     * @param port           服务器端口
     * @return 远程服务
     * @throws Exception
     */
    @SuppressWarnings("unchecked")
    public static <T> T refer(final Class<T> interfaceClass, final String host, final int port) throws Exception {
        if (interfaceClass == null)
            throw new IllegalArgumentException("Interface class == null");
        if (!interfaceClass.isInterface())
            throw new IllegalArgumentException("The " + interfaceClass.getName() + " must be interface class!");
        if (host == null || host.length() == 0)
            throw new IllegalArgumentException("Host == null!");
        if (port <= 0 || port > 65535)
            throw new IllegalArgumentException("Invalid port " + port);
        System.out.println("Get remote service " + interfaceClass.getName() + " from server " + host + ":" + port);

        return (T) Proxy.newProxyInstance(interfaceClass.getClassLoader(), new Class<?>[]{interfaceClass}, new InvocationHandler() {
            public Object invoke(Object proxy, Method method, Object[] arguments) throws Throwable {
                Socket socket = new Socket(host, port);
                try {
                    ObjectOutputStream output = new ObjectOutputStream(socket.getOutputStream());
                    try {
                        output.writeUTF(method.getName());
                        output.writeObject(method.getParameterTypes());
                        output.writeObject(arguments);
                        ObjectInputStream input = new ObjectInputStream(socket.getInputStream());
                        try {
                            Object result = input.readObject();
                            if (result instanceof Throwable) {
                                throw (Throwable) result;
                            }
                            return result;
                        } finally {
                            input.close();
                        }
                    } finally {
                        output.close();
                    }
                } finally {
                    socket.close();
                }
            }
        });
    }

}

#+END_SRC

** 定义服务接口 
#+BEGIN_SRC 

/**
 * HelloService
 * 
 */
public interface HelloService {

    String hello(String name);

}

#+END_SRC


** 实现服务 
#+BEGIN_SRC java

import java.util.Date;

/**
 * HelloServiceImpl
 * 
 */
public class HelloServiceImpl implements HelloService {

    public String hello(String name) {
        System.out.println("i called at : " + new Date());
        return "Hello " + name;
    }

}

#+END_SRC

** 暴露服务

面对RPC接口调用时， 无法实现多态。因为进程不会像jvm一样本地调用理解多态语义，远程调用只能将多态调用显示的暴露出来，需要特殊标记实现。
#+BEGIN_SRC 

package org.jerry.test.rpc;


/**
 * RpcProvider
 */
public class RpcProvider {

    public static void main(String[] args) throws Exception {
        HelloService service = new HelloServiceImpl();
        RpcFramework.export(service, 1234);
    }

}
#+END_SRC

** 引用服务
大部分跨语言平台 RPC 框架采用根据 IDL 定义通过 code generator 去生成 stub 代码。
#+BEGIN_SRC 
package org.jerry.test.rpc;

/**
 * RpcConsumer
 * 
 * @author william.liangf
 */
public class RpcConsumer {
    
    public static void main(String[] args) throws Exception {
        HelloService service = RpcFramework.refer(HelloService.class, "127.0.0.1", 1234);
        for (int i = 0; i < Integer.MAX_VALUE; i ++) {
            String hello = service.hello("World" + i);
            System.out.println(hello);
            Thread.sleep(1000);
        }
    }
    
}

#+END_SRC

* RPC相关实现方式

#+BEGIN_SRC

JavaRMI
XML-RPC，XML+HTTP来进行机器之间的调用
JSON-RPC
SOAP，XML-RPC的升级版
Facebook Thrift
CORBA
AMF，AdobeFlex
Libevent，是一个用于构建RPC Server和Client的框架。
WCF，来自微软
.net Remoting，逐步被WCF取代
#+END_SRC
  
* RPC的应用
#+BEGIN_SRC

RPC在分布式系统中的系统环境建设和应用程序设计中有着广泛韵应用，应用包括如下方面：　　
1．分布式操作系统的　　进程间通讯进程间通讯是操作系统必须提供的基本设施之一，分布式操作系统必须提供分布于异构的结点机上进程间的通讯机制，RPC是实现消息传送模式的分布式进程间通讯的手段之一。　　
2．构造分布式计算的软件环境　　由于分布式软件环境本身地理上的分布性它的各个组成成份之问存在大量的交互和通讯，RPC是其基本的实现方法之一。ONC+和DCE两个流行的分式布计算软件环境都是使用RPC构造的，其它一些分布式软件环境也采用了RPC方式。　　
3．远程数据库服务　　在分布式数据库舞统中，数据库一般驻存在服务器上，客户机通过远程数据痒服务功能访问数据库服务器，现有的远程数据库服务是使用RPC模式的。锝如，Sybase和Oacle都提供了存储过程机制，系统与用户定义的存储过程存储在数据摩服务锯上，用户在客户端使用RPC模式调用存储过程。　　
4．分布式应用程序设计　　RPC机制与RPC工具为分布式应用程序设计提供了手段和方便，用户可以无需知道网络结构和协议细节而直接使用RPC工具设计分布式应用程序。　　
5．分布式程序的调试　　RPC可用于分布式程序的调试。使用反RPC使服务器成为客户并向它的客户进程发出RPC，可以调试分布式程序。例如．在服务器上运行一个远端调试程序，它不断接收客户端的RPC，当遇到一个调试程序断点时，它向客户机发回一个RPC，通知断点已经到达，这也是RPC用于进程通讯的例子。
#+END_SRC
