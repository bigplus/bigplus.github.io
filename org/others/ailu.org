#+TITLE: AILu文档

* AILU 简介
    AILu， 旨在提供一个智能的对答系统。
    在多个垂直领域帮用户完成一定的任务才是其核心功能和存在价值。

最终希望AILu作为"个人智能助理"，具有一定程度的语义理解和用户意图识别能力，可以聊天解闷，更主要的功能是帮助办理一定的事务，比如预订餐厅、预订出租车、搜索精确答案、查询天气等。

在可见的能力范围内，可以实现易宝公司内部问题解答，周围订餐，查询天气，聊天解闷等功能。

还未列入计划但是可以考虑的：作为数据平台对外一个通用产品，没有考虑个性化系统的构建和面向c端用户的记忆系统。

ps:整个工程排期分4次迭代
1. 实现引擎原型
       实现基本对话功能（即基本问答）
       主要技术：中英文分词，底层规则的存储策略，AI策略，源码开发调试

2. 实现特定领域学习
       基于特定领域语料实现基本对话策略（即解决问答要求）
       先以易宝内部咨询为主
       主要技术：数据源的数据获取和清洗处理是重点，语料生成，后续机器学习，生成策略。
       ps:数据获取等是重点. 先以内部为主。

3. 构建完整基本服务
        技术：建立记忆系统，个性化系统。

4. 后续构建，暂不安排，以前3次迭代为主，做后期优化。

  ps:AILu的工作可以被分成两个部分：训练+匹配。（其实很多AI的东西都可以被这么划分，比如人脸识别，语音识别等等）
   
* AILU 设计

  #+CAPTION: ailu整体设计
  [[./img/ailu-arch.png]]
  
  上图主要展示了Ailu的计算模块，分为4大部分：AI引擎，Search引擎，自学习引擎，Hook引擎。
  
  其中每个计算引擎都对应相应的资源模块。资源模块主要包括数据、领域模型。

** AI引擎

   AI-Engine是当前系统中最重要的一个计算模块，可以被理解为整个系统的第一个具体执行环境和场所，执行系统调用领域数据、模型和程序(扩展脚本)。
   
   对用户输入进行解析，并将文本信息在这里解析为用户真正的意图，做相应，或者根据意图调用服务（有脚本实现）。

   #+CAPTION: ai-engine
   [[./img/ailu-ai.png]]

   简单的解释如下：
1. ai-engine的‘数据资源’为已经训练好的语料，可以直接使用。具体存储方式安装不同领域划分。
以文本形式XML存在。有固定的语法结构。暂时不展开详细讨论。

2. ai-engine的‘模式匹配’为一个模式匹配语法树，在系统初始化时，会对语料进行加载，在内存维护树数据结构。
   
3. 语义解析器主要完成类似分词的功能。

*** 脚本模式
此模式主要根据语义理解，调用系统脚本，执行相应逻辑。

** Search引擎

主要基于搜索引擎技术（这是我学生时代最喜欢的，也因为这个前领导直接把我招聘带到搜狐工作，很是怀念啊）。

具体技术包括：1.分词。2.词库构建。3.权重计算。

Search引擎分对内和对外2中情况。

对内主要是说，比如，公司内部资料，在无法完全形成对话式语料之前，比如一个公告，一个主题文章等，都进入搜索模块。

对外主要是说，在Search引擎内部，优先执行内部搜索，在内部搜索无效的时候才会触发外部搜索，外部搜索暂时不考虑技术问题。

下面主要说说内部搜索的实现。

原理如下，和搜索引擎大同小异

   #+CAPTION: ai-search
   [[./img/ailu-search.png]]
   
1. 分词，首先保证垂直领域的词的实时性。只提要注意的点：按领域特点设置停词，专有名词。
   
2. 索引，还没有做优化
   
3. 权重计算，按照余弦公式方式计算。默认返回权值最大值。

** AI 自学习模块

AILu学习方式有2种，一种是特定领域的大范围学习，一种是小范围的特殊问题的学习。

   #+CAPTION: ai-learn
   [[./img/ailu-learn.png]]



当前模块主要为了后者服务。让用户可以实时的与AILu系统进行交换。
学习能力主要为以下细节：1. 学习记忆。 2. 更新。 3. 自扩展能力。
自学习模块虽然在架构设计中被作为一个独立的模块，但实际是 ai-engine 中一个完整的扩展模块。
1. 学习记忆很简单：学习+记忆。
主要是将用户语义中Q问题A答案转化为特定的标记文本，可以被engine识别，然后存储下来。
2. 更新
是说对过时的答案进行刷新或者，一个问题有多个答案的时候，进行多答案记录。
3. 自扩展能力是和1，2同时存在，1，2也会用到的。
展开的说就是
   #+BEGIN_SRC
   首先进行自然语言处理，具体方式可以理解为找近义词，对海量互联网文本信息进行分析，得到词的聚类。这其中用到的技术包括：1.分词。2.自然语言的深度学习。
然后对用户输入的问题：首先分词，对分词结果进行去留的抉择，一般只留动，名词，然后扩展词量，可以理解为找近义词的过程，然后得到所有的排列组合，
这样就形成了多对一（n：1）的情况，可以很好的处理用户的请求。
用户进行更新操作的时候，首先找到当前语义树，然后对此数据结构进行更新
此为一对多的过程
整体形成n：n
   #+END_SRC
** Hook实现
作为公司内部产品，有必要添加一个hook，比如，公司明天通知大家都在一个2寸照片来公司。
在员工使用AILu的时候，询问天气，这个时候就可以在结尾很友情提示的加上记得带照片来公司。

* AILU 实现方式

Java为主要开发语言，maven构建，git版本管理
分词，自然语言处理，人工智能标记语言，等

* AILU 没有完成的
还有很多没完成
1. 模块拆分， 解耦设计，基于IOC， 实现热插拔

2. 调用jd的jimi， 实现语料库积累

3. aiml 文件使用神经网络， 动态加载。
   
4. 交互请求

              req                            resp
               |                                ^
               V                                |
              交互                              |
               |   |
               | A |
               V                               |
              拦截          -> 学习系统          |
               |                                |
               V                                |
             不同系统间的调用                     |


* 缺点
没有真正的实现完全的智能化，没有使用神经网络等智能高科技
* 总结
。。。
