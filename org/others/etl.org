#+TITLE: ETL 设计文档
#+AUTHOR: Jerry

* 项目说明 
  #+BEGIN_SRC 
  ETL，Extraction-Transformation-Loading的缩写，即数据抽取（Extract）、转换（Transform）、装载（Load）的过程，它是构建数据仓库的重要环节。
  ETL是将业务系统的数据经过抽取、清洗转换之后加载到数据仓库的过程，目的是将企业中的分散、零乱、标准不统一的数据整合到一起，为企业的决策提供分析依据。ETL是BI项目重要的一个环节。通常情况下，在BI项目中ETL会花掉整个项目的1/3的时间,ETL设计的好坏直接关接到BI项目的成败。 　　

  在数据仓库的构建中，ETL贯穿于项目始终，它是整个数据仓库的生命线，包括了数据清洗、整合、转换、加载等各个过程。如果说数据仓库是一座大厦，那么ETL就是大厦的根基。ETL抽取整合数据的好坏直接影响到最终的结果展现。所以ETL在整个数据仓库项目中起着十分关键的作用，必须摆到十分重要的位置。 　　
  通过ETL，我们可以基于源系统中的数据来生成数据仓库。ETL为我们搭建了OLTP系统和OLAP系统之间的桥梁，是数据从源系统流入数据仓库的通道。在数据仓库的项目实施中，它关系到整个项目的数据质量，所以马虎不得，必须将其摆到重要位置，将数据仓库这一大厦的根基筑牢! 　
  #+END_SRC
* 设计说明
** 总体架构说明
   #+BEGIN_SRC 
   
  ETL主要是利用转换服务器的处理能力，从源表抽取数据后，在转换服务器中进行数据清洗、转换，完成后加载到目标库中。它的转换过程都是在转换服务器中进行的，所以它的性能瓶颈在中间的转换服务器中。 　　
  ETL的设计分三部分：数据抽取、数据的清洗转换、数据的加载。在设计ETL的时候我们也是从这三部分出发。数据的抽取是从各个不同的数据源抽取到ODS（OperationalDataStore，操作型数据存储） 中——这个过程也可以做一些数据的清洗和转换），在抽取的过程中需要挑选不同的抽取方法，尽可能的提高ETL的运行效率。ETL三个部分中，花费时间最长的是“T”（Transform，清洗、转换）的部分，一般情况下这部分工作量是整个ETL的2/3。数据的加载一般在数据清洗完了之后直接写入DW （DataWarehousing，数据仓库）中去。 　　
  ETL的实现有多种方法，常用的有三种。一种是借助ETL工具实现，一种是SQL方式实现，另外一种是ETL工具和SQL相结合。前两种方法各有各的优缺点，借助工具可以快速的建立起ETL工程，屏蔽了复杂的编码任务，提高了速度，降低了难度，但是缺少灵活性。SQL的方法优点是灵活，提高ETL运行效率，但是编码复杂，对技术要求比较高。我们的ETL是综合了前面二种的优点，将业务逻辑放在了数据转换阶段，这样既可以极大的适应公司的各种需求，又可以提高ETL的开发速度和效率。
   #+END_SRC
  以下是我们的 ETL的结构流程：
  #+CAPTION: ETL流程图
  [[./img/etl-all]]

** 数据的抽取 　　
这一部分需要在调研阶段做大量的工作，首先要搞清楚数据是从几个业务系统中来,各个业务系统的数据库服务器运行什么DBMS,是否存在手工数据，手工数据量有多大，是否存在非结构化的数据等等，当收集完这些信息之后才可以进行数据抽取的设计。 　　
首先，要把不同的来源数据抽取过来，经过最基本的清洗，存放起来。格式类似于：select *, count(*), sum(*) from multi table
第二个问题就是要注意抽取数据的时间类型，全量还是增量，增量需选取一个时间列。

** 数据的清洗转换 　　
   #+BEGIN_SRC 
   
通常的做法是从业务系统到数据源做清洗，将脏数据和不完整数据过滤掉，再进行一些业务规则的计算和聚合。 　　
1、数据清洗 　　
数据清洗的任务是过滤那些不符合要求的数据，将过滤的结果交给业务主管部门，确认是否过滤掉还是由业务单位修正之后再进行抽取。不符合要求的数据主要是有不完整的数据、错误的数据、重复的数据三大类。 　　
格式清洗：空值处理，规范化数据格式，无效数据替换，（过滤和排序）
清洗时首先是要将数据存放在内存中，数据结构为Table<String,String,Object>（队列中）或文件。
2、数据转换 　　
数据转换的任务主要进行不一致的数据转换、数据粒度的转换，以及一些商务规则的计算。 　　
（1）不一致数据转换：这个过程是一个整合的过程，将不同业务系统的相同类型的数据统一，比如同一个供应商在结算系统的编码是XX0001,而在CRM中编码是YY0001，这样在抽取过来之后统一转换成一个编码。 　　
（2）数据粒度的转换：业务系统一般存储非常明细的数据，而数据仓库中数据是用来分析的，不需要非常明细的数据。一般情况下，会将业务系统数据按照数据仓库粒度进行聚合。 　　
（3）商务规则的计算：不同的企业有不同的业务规则、不同的数据指标，这些指标有的时候不是简单的加加减减就能完成，这个时候需要在ETL中将这些数据指标计算好了之后存储在数据仓库中，以供分析使用。
我们的数据转换包含几个基本类型：横纵合并，替换=有条件的替换+无条件替换，关联，支持扩展。
   #+END_SRC

** 数据加载
将统一格式数据导入数据仓库。并且我们支持多库同时加载。

四、我们的ETL不同之处
首先，我们的ETL具有定时功能模块，可以定时跑任务，这样能够保证作业的周期性执行。其次，我们的ETL最重要之处在于数据转换类型。我们定义了几种特殊的转换类型来使用我们公司的需求，这样能够保证ETL的有效执行，而如果选用市场上的ETL有可能出现不满足公司业务需求的问题。再次我们的ETL支持业务自由开发，只要编写，添加ETL的转换器就可以实现对于特定需求的满足。可以提供较强大的连接功能（connectivity）来连接来源及目的端，开发人员不用去熟悉各种相异的平台及数据的结构，亦能进行开发。
* 使用说明
** ETL模块（抽取extract, 转换transform, 存储Load） 
ETL登录以后可以看到做以下几个操作。（登录之后默认进入任务管理界面。） 
#+CAPTION: etl功能
[[./img/etl-function.png]]
*** 任务管理 
ETL登录之后首先进入任务管理界面。
任务管理界面可以用来配置ETL任务。 

ETL任务配置： 
点击页面右上角操作按钮，选择创建新任务，出现如图所示。 

**** Job配置 
     #+CAPTION: Job配置
     [[./img/etl-job.png]]
+ 任务标识：任务名称，给你的ETL任务起一个名字。 
+ 任务描述：描述该任务所要做的事情 
+ 是否可用：默认值为可用（配置任务时就默认可用就ok了） 
+ 时间粒度、时间范围、时间类型： 
+ 时间粒度是你从数据库捞取数据的单位，如果你只需要捞取一天那么久选“日”，如果你想全部捞取就选择“所有”。 
+ 时间范围根据时间粒度划分，比如你选择按“日”捞取的话，时间范围就选择捞取的起止日期。 
+ 时间类型，根据来定。

**** E配置 
点击添加可以看到E配置信息。（不知道怎么填写的尽量默认） 
E配置可以配置多个，（需要从几个表里拿数据就配置几个 e）每一个分为数据源配置和E配置两部分。下面我们来看一个： 

**** Extracter配置 
     #+CAPTION:Extracter配置
     [[./img/etl-e.png]]
#+BEGIN_SRC 
数据源配置： 
数据源配置为捞取的数据库相关的配置。 
任务标识：默认为Job配置的任务名称，不可更改。 
数据源标识：自己给这个E配置起的名称。 
sql语句：通过sql语句来向数据库中的某些表select数据。 
是否可用：默认可用。 
数据库：该 e任务从哪个数据库中捞取数据。（如果选项中没有你所需的数据库则从菜单栏的增加数据源来增加数据库，操作请看下面） 
是否全部捞取：根据自己所需情况选择。 
是否加密：根据自己表中的字段是否加密来判断。 
期望捞取行数：不用填。 
E配置： 
字段名称类型：你的sql当中所用到的字段应该由对应的类型，将对用的类型用jason格式表示出来，顺序不区分。 
抽取类型：默认RdbExtractor。 
是否可用：默认可用 
是否需要清洗：默认清洗。 
#+END_SRC
**** Transformation配置 
T配置是和E配置一一对应的，也就是你有几个 E配置就要有几个T配置。 

     #+CAPTION:Transformation配置
[[./img/etl-t.png]]
#+BEGIN_SRC 
转换标识：与对应的E配置的数据源标识一致 
任务标识：默认与Job一致 
是否可用：默认可用 
转换类型：（接下来会介绍） 
数据源标识：与E配置的数据源标识一致 


接下来：（转换类型） 
转换类型选项： 
主表 
默认合并转换器 
列替换转换器 
主键替换转换器 
其他（特殊任务需要，不需要了解） 

主表：第一个T配置，转化类型要配置成主表，即为合成宽表的基础表。 
默认合并转换器： 
将两个表合并 
规则：后面的数据集中的数据覆盖前面的数据集中有相同rowkey的值 
列替换转换器： 
表1: 字段1 =>表2: 字段2 
规则：把表1的字段2替换成表2的字段2，条件是字段1等于表2的主键 
主键替换转换器： 
表1: 字段1 =>表2: 字段2  
规则：把表1的字段1替换成表2的字段2，条件是字段1等于表2的主键 

#+END_SRC

**** Loader配置 

     #+CAPTION:Loader配置
[[./img/etl-l.png]]
#+BEGIN_SRC 
加载标识：自己起一个名字 
加载驱动类: 默认RdbBatchLoader 
数据库：需要load到的数据库名称 
表名称： 
是否包含加密：依自身任务决定 
isEtlTaskIdNeeded：默认是 
updatesqlList：如需更新宽表数据，及在此处填写相应的sql 

#+END_SRC
#+BEGIN_SRC 
加载标识：自己起一个名字 
加载驱动类: 默认RdbBatchLoader 
数据库：需要load到的数据库名称 
表名称： 
是否包含加密：依自身任务决定 
isEtlTaskIdNeeded：默认是 
updatesqlList：如需更新宽表数据，及在此处填写相应的sql 

#+END_SRC
**** 增加数据源
     如果ETL任务中没有所需数据库，则在此添加 
[[./img/etl-as.png]]
**** 定时任务
[[./img/etl-timer.png]]
#+BEGIN_SRC 
定时任务：设置任务跑的时间点 
例： 0 30 2 * * ? 
代表每天的2:30:00开始执行任务 
例：18 30 12 * * ? 
代表每天的12:30:18开始执行任务 
（注：定时任务设定时间尽量避开其他定时任务，以防高峰期） 

显示定时任务：可以查看定时设置状态，同时可以对定时任务进行修改 

#+END_SRC
