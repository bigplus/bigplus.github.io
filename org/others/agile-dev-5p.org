#+TITLE: Agile Dev 5 Principles

* 敏捷开发5大原则，总结：
以下原则中的任何一个都可以单独写一篇文章，每一个原则，都应该是当年前辈写的一篇文论吧。。。所以在此，仅仅抛砖引玉。

1. SRP
2. OCP
3. LSP
4. DIP
5. ISP Interface Segregation Principle

ps：实际编程中，首先应该记住：不要过早的进行抽象。当变化需求真正来的时候，在进行抽象。
* SRP
#+BEGIN_SRC

所谓的的 SRP 指的是：Single Responsibility Principle， 单一职责原则。
_/就一个类而言，应该仅有一个引起它变化的原因/_
因为，一个类如果承担了过多的职责，就相当于把职责耦合在一起。这样，一个职责的变化可能影响其他职责的变化，这种耦合会导致脆弱的设计。
/职责的定义：变化的原因/

SRP的本质是明确职责，做到低耦合设计，从而得到灵活的扩展。
PS：1. 其中单元测试是驱动发现类变化的一种方式。 2. 使用FACADE或者PROXY模式对其进行重构。

#+END_SRC

* OCP
OCP：Open-Closed Principle， 开放关闭原则
_/软件实体（类，模块，函数等等）应该是可以扩展的，但是不可修改的。/_
如果程序一处发生改动，就要去改源码的很多地方，那这就不是个好的设计，是一种僵化的设计。

OCP作为指导原则，驱动代码重构。，为了以后不要如此僵化。
OCP背后的主要机制是抽象和多态
#+BEGIN_SRC

OCP中的开放如下定义：
  a. 对于扩展是开放的，Open 4 extension
  模块的行为是可以扩展的，当需求变化时，我们可以对模块进行扩展，使模块可以满足新的需求。
  b. 模块的更改是封闭的 Closed 4 modification
  对模块的更改是封闭的，也就是说在更改模块行为的时候，不应该去修改源码，or jar包
#+END_SRC
* LSP
Liskov Substitution Principle
子类型必须能够替换掉他们的基类型

* DIP
Dependency Inverse Principle 依赖倒置原则。（ps：spring的核心思想，也是框架设计的核心思想）
a.高层模块不应该依赖于低层模块。二者都应该依赖于抽象。
b.抽象不应该以来于细节。细节应该依赖于抽象。
这2句话，说的太好，让我十分的感叹。
个人理解：1.传统软件设计，都是分层的，个人认为分层的不是不好。
         2 分层的设计，不等于简单的依赖。

从模块设计角度来说，模块是给所谓的客户服务的，也就是客户拥有接口，而服务提供者拥有接口的派生实现。
这里提到接口所有权问题。从系统整体的设计角度来说，我们遵从著名的Hollywood原则：Don't call us, we'll call you.也就是底层模块实现了在高层模块中声明被高层模块调用的接口。
所以在模块设计的时候应该以整体系统角度出发，而不要考虑单个模块的服用程度，有点战略的意思，而不是战术的感觉。

DIP的具体实现就是这样一句话：依赖于抽象：程序中的所有的依赖关系都应该终止于抽象类或者接口。

* ISP
Interface Segregation Principle 接口隔离原则




* 
